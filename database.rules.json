{
  "rules": {
    ".read": false,
    ".write": false,
    "jobs": {
      ".indexOn": ["status", "ownerUid"],
      ".read": "auth != null",
      "$jobId": {
        ".read": "auth != null && data.exists() && data.child('ownerUid').val() === auth.uid",
        ".write": "auth != null && (
          // Create new job: must be pending status and owner must match
          (!data.exists() && 
           newData.exists() && 
           newData.child('ownerUid').val() === auth.uid && 
           newData.child('status').val() === 'pending' &&
           newData.child('title').isString() &&
           newData.child('company').isString() &&
           newData.child('location').isString() &&
           newData.child('description').isString() &&
           newData.child('applyEmail').isString() &&
           newData.child('createdAt').isString() &&
           newData.child('employmentType').isString() &&
           newData.child('workMode').isString() &&
           newData.child('title').val().length > 0 &&
           newData.child('company').val().length > 0 &&
           newData.child('location').val().length > 0 &&
           newData.child('description').val().length > 0 &&
           newData.child('applyEmail').val().length > 0
          ) ||
          // Update existing job: must be owner and job exists
          (data.exists() && 
           data.child('ownerUid').val() === auth.uid &&
           newData.exists() &&
           newData.child('ownerUid').val() === auth.uid &&
           // Allow status updates (pending -> approved, approved -> unavailable, unavailable -> approved)
           (data.child('status').val() === 'pending' || 
            data.child('status').val() === 'approved' || 
            data.child('status').val() === 'unavailable') &&
           (newData.child('status').val() === 'pending' || 
            newData.child('status').val() === 'approved' || 
            newData.child('status').val() === 'unavailable')
          ) ||
          // Delete job: must be owner
          (data.exists() && 
           data.child('ownerUid').val() === auth.uid &&
           !newData.exists()
          )
        )",
        ".validate": "newData.hasChildren(['ownerUid', 'title', 'company', 'location', 'description', 'applyEmail', 'createdAt', 'status', 'employmentType', 'workMode'])"
      }
    }
  }
}
